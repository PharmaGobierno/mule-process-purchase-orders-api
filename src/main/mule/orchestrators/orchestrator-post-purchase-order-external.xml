<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:process-provision-cost-api="http://www.mulesoft.org/schema/mule/process-provision-cost-api" xmlns:traxion-s-logger="http://www.mulesoft.org/schema/mule/traxion-s-logger"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/traxion-s-logger http://www.mulesoft.org/schema/mule/traxion-s-logger/current/mule-traxion-s-logger.xsd
http://www.mulesoft.org/schema/mule/process-provision-cost-api http://www.mulesoft.org/schema/mule/process-provision-cost-api/current/mule-process-provision-cost-api.xsd">
	<sub-flow name="orchestrator-post-purchase-order-external" doc:id="47eb1bb4-3ce4-4c01-98f2-5562a9d5c306" >
		<logger level="INFO" doc:name="Logger" doc:id="00375705-b889-46e1-b56d-6689d220e2ac" message="#[payload]"/>
		<set-variable value="#[attributes.queryParams.srcSystem]" doc:name="Set Variable" doc:id="0a5c45a8-60bc-46ff-ae68-f1310fdd73e2" variableName="srcSystem"/>
		<choice doc:name="Choice" doc:id="a6dac7e9-99d4-4f57-8083-78259bc37866">
			<when expression='attributes.queryParams.srcSystem == "MD"' >
				<ee:transform doc:name="Transform Message" doc:id="b4f34588-d761-45e5-9d45-f78a148b3b85">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings
import withMaxSize from dw::core::Strings
fun formatdate(d: DateTime) = d as String {
       format: "yyyyMMdd"
}
fun formatyear(d: DateTime) = d as String {
       format: "yyyy"
}
---
{
	
       IM_COMP_CODE: "MD00",
       IM_DOC_TYPE: "ZTRA",
       IM_CREAT_DATE: formatdate(now()>>'America/Mexico_City') default "",
       IM_CREATED_BY: "Medistik",
       IM_VENDOR: payload.Load.carrierCode,
       IM_PURCH_ORG: "6001",
       IM_PUR_GROUP: "113",
       IM_CURRENCY: payload.Load.currencyCode,
       IM_DOC_DATE: formatdate(now()>>'America/Mexico_City') default "",
       IM_IHREZ: payload.Load.systemLoadID,
       IM_BELNR: "",
       IM_GJAHR: formatyear(now()>>'America/Mexico_City') default "",
       IM_POTEXTHEADER: payload.Load.systemLoadID default "",
       IM_COND_VALUE:  "",
       IM_IT_ITEM: payload.Load.transaction map (item,index)->  {
             IM_ITEM: leftPad ((index +1)*10,5,0),
             IM_ADRN2: p("purchaseorder.imadrn2"),
             IM_SHORT_TEXT: item.chargeCd,
             IM_MATERIAL: "000000000003000476",
             IM_PLANT: "6001",
             IM_QUANTITY: "1.000",
             IM_PO_UNIT: "SER",
             IM_NET_PRICE: item.chargedAmount,
             IM_TAX_CODE: "W1",
             IM_ACCTASSCAT: "K",
             IM_FUND: "",
             IM_FUNDS_CTR: "",
             IM_DELIVERY_DATE: formatdate(now()>>'America/Mexico_City') default "",
             IM_COSTCENTER: payload.Load.CeCo default "",
             IM_EAN11: payload.Load.systemLoadID,
             IM_POTEXTITEM: item.chargeId default "",
             IM_EM_ITEM_TEXT: "Load:" ++ (payload.Load.systemLoadID default ""),
       },
       "EX_RETURN": {
    "EX_ID_ORDEN_COMPRA": "",
    "EX_STATUS": "",
    "EX_IT_MENSAJE": [
      {
        "EX_ID_MSG": "",
        "EX_DESC": ""
      }
    ]
  }
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</when>
			<when expression='attributes.queryParams.srcSystem == "VM"'>
				<ee:transform doc:name="Build Request" doc:id="bf607358-d150-476c-9b12-11459c708797">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings
import withMaxSize from dw::core::Strings
import modules::myGlobalFunctions as globalFunctions
fun formatdate(d: DateTime) = d as String {
       format: "yyyyMMdd"
}
fun formatyear(d: DateTime) = d as String {
       format: "yyyy"
}
---
{
	
       IM_COMP_CODE: "VM00",
       IM_DOC_TYPE: if (payload.Load.serviceType == "Origen") "ZVMO" else if (payload.Load.serviceType == "Destino") "ZVMD" else "ZVMO",
       IM_CREAT_DATE: formatdate(now()>>'America/Mexico_City') default "",
       IM_CREATED_BY: "VModal",
       IM_VENDOR: if (payload.Load.carrierCode contains("MXS")) payload.Load.carrierCode else leftPad(payload.Load.carrierCode,10,0),
       IM_PURCH_ORG: "3001",
       IM_PUR_GROUP: "113",
       IM_CURRENCY: payload.Load.currencyCode,
       IM_DOC_DATE: formatdate(now()>>'America/Mexico_City') default "",
       IM_IHREZ: payload.Load.VMXId,
       IM_BELNR: "",
       IM_GJAHR: formatyear(now()>>'America/Mexico_City') default "",
       IM_POTEXTHEADER: payload.Load.VMX default "",
       IM_COND_VALUE:  "0",
       IM_IT_ITEM: payload.Load.transaction map (item,index)->  {
             IM_ITEM: leftPad ((index +1)*10,5,0),
             IM_ADRN2: p("purchaseorder.imadrn2"),
             IM_SHORT_TEXT: item.chargeDesc default "",
             IM_MATERIAL: leftPad(item.Material,18,0),
             IM_PLANT: "3001",
             IM_QUANTITY: "1.000",
             IM_PO_UNIT: "SER",
             IM_NET_PRICE: item.chargedAmt,
             IM_TAX_CODE: globalFunctions::getVMTax(payload.Load.carrierCode),
             IM_ACCTASSCAT: "K",
             IM_FUND: "",
             IM_FUNDS_CTR: "",
             IM_DELIVERY_DATE: formatdate(now()>>'America/Mexico_City') default "",
             IM_COSTCENTER: payload.Load.CeCo default "",
             IM_EAN11: payload.Load.VMXId,
             IM_POTEXTITEM: item.Material,
             IM_EM_ITEM_TEXT: "VMX:" ++ (payload.Load.VMX default ""),
       },
       "EX_RETURN": {
    "EX_ID_ORDEN_COMPRA": "",
    "EX_STATUS": "",
    "EX_IT_MENSAJE": [
      {
        "EX_ID_MSG": "",
        "EX_DESC": ""
      }
    ]
  }
}
]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="cancelations" ><![CDATA[%dw 2.0
output application/json
---
payload.Load.cancelations.VMXId
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" doc:id="a1a5e269-012e-46fa-97dc-4729da294a2d" message="***************************** Invalid srcSystem  *************************************" />
			</otherwise>
		</choice>
		<set-variable value="#[payload]" doc:name="Set Variable" doc:id="ae1d8635-0d9d-441d-b33f-6f0bf44da09e" variableName="sapRQ" />
		<traxion-s-logger:logger-traxion messageType="JSON" doc:name="Save SAP RQ" doc:id="5ac8f122-9725-42ff-a502-74eb0e8f83d2" config-ref="Traxion_s_logger_Config" activityName="Purchase-Order-SAP_RQ" destinationName="${jms.queue.commons.logs}" writeInLog="${traxion.settings.logs.write}">
			<traxion-s-logger:input-parameters>
				<traxion-s-logger:input-parameter key="date" value="#[(now()&gt;&gt;'America/Mexico_City') as String {format: &quot;y-MM-dd&quot;}]" />
				<traxion-s-logger:input-parameter key="reference3" value="#[vars.srcSystem]" />
				<traxion-s-logger:input-parameter key="message_type" value="Request" />
				<traxion-s-logger:input-parameter key="reference1" value='F' />
				<traxion-s-logger:input-parameter key="source" value="Purchase Order" />
				<traxion-s-logger:input-parameter key="id" value='#[vars.sapRQ.IM_IHREZ default ""]' />
				<traxion-s-logger:input-parameter key="reference2" value="#[correlationId]" />
			</traxion-s-logger:input-parameters>
		</traxion-s-logger:logger-traxion>
		<flow-ref doc:name="call clients-system-sap-generatePurchaseOrder" doc:id="a484f77e-b9a6-49f6-8cc0-2569036d04c0" name="clients-system-sap-purchaseorder" />
		<traxion-s-logger:logger-traxion messageType="JSON" doc:name="Save SAP RS" doc:id="4787cccb-a956-4198-a040-f2232e441c0d" config-ref="Traxion_s_logger_Config" activityName="Purchase-Order-SAP_RQ" destinationName="${jms.queue.commons.logs}" writeInLog="${traxion.settings.logs.write}">
			<traxion-s-logger:input-parameters>
				<traxion-s-logger:input-parameter key="date" value="#[(now()&gt;&gt;'America/Mexico_City') as String {format: &quot;y-MM-dd&quot;}]" />
				<traxion-s-logger:input-parameter key="reference3" value="#[vars.srcSystem]" />
				<traxion-s-logger:input-parameter key="message_type" value="Response" />
				<traxion-s-logger:input-parameter key="reference1" value="F" />
				<traxion-s-logger:input-parameter key="source" value="Purchase Order" />
				<traxion-s-logger:input-parameter key="id" value='#[vars.system_id default ""]' />
				<traxion-s-logger:input-parameter key="reference2" value="#[correlationId]" />
			</traxion-s-logger:input-parameters>
		</traxion-s-logger:logger-traxion>
		<set-variable value="#[payload]" doc:name="Set Variable" doc:id="67b61e93-477b-4644-8086-62918c8d29d5" variableName="RsBack"/>
		<traxion-s-logger:logger-traxion messageType="JSON" doc:name="Auditoria - SAP Record" doc:id="1842caf6-f035-42e6-8a46-41791d66f4f5" config-ref="Traxion_s_logger_Config" activityName="Purchase-Order-SAP_Record" destinationName="${jms.queue.proccess.sap.logger}" writeInLog="${traxion.settings.logs.write}" >
			<traxion-s-logger:message ><![CDATA[#[%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  "srcSystem": attributes.queryParams.srcSystem,
  "loadId": vars.sapRQ.IM_IHREZ default "",
  "profitCenter": vars.sapRQ.IM_IT_ITEM.IM_COSTCENTER[0] default "",
  "monto": sum(vars.sapRQ.IM_IT_ITEM.IM_NET_PRICE ) default "",
  "moneda": vars.sapRQ.IM_CURRENCY default "",
  "numeroDocSap": payload.d.ex_it_return.results.ex_belnr[0] default "",
  "numeroDocMigo": (payload.d.EX_RETURN.EX_IT_MENSAJE.results filter ($.EX_ID_MSG == 'MGO' ))[0].EX_DESC default "",
  "sociedad": vars.sapRQ.IM_COMP_CODE default "",
  "fecha_contabilizacion":payload.d.ex_it_return.results.ex_bldat[0] default "",
  "statusSap": payload.d.ex_status default "E",
  "statusCommit": ""
}]]]></traxion-s-logger:message>
			<traxion-s-logger:input-parameters >
				<traxion-s-logger:input-parameter key="correlation_id" value="#[correlationId]" />
				<traxion-s-logger:input-parameter key="type" value="DB" />
			</traxion-s-logger:input-parameters>
		</traxion-s-logger:logger-traxion>
		<async doc:name="Async" doc:id="b25289a9-963b-47d4-a63f-f76794334d4e" >
			<choice doc:name="Choice" doc:id="505180fc-c04f-4b17-9663-9bee67feafc9">
			<when expression='#[payload.d.EX_RETURN.EX_STATUS == "S"]'>
				<logger level="INFO" doc:name="Logger" doc:id="2402c93c-1b04-4543-a84e-372e83ded45e" message="#['\n'] ********** El valor de ExStatus es: #[payload.d.EX_RETURN.EX_STATUS] **********  #['\n']" />
					<choice doc:name="Choice" doc:id="080dbc87-a06a-417d-a562-d5532f5b5445" >
						<when expression='#[vars.srcSystem == "VM"]' >
							<logger level="INFO" doc:name="Logger" doc:id="f5576431-b220-4837-9bcc-44c25015969f" />
							<foreach doc:name="For Each" doc:id="c1317bc3-06d4-4578-b926-efbba777f55f" collection="#[vars.cancelations]">
								<ee:transform doc:name="Build Request" doc:id="9f461d80-c0ff-4871-b6f1-1d06f3973b3b">
								<ee:message>
								</ee:message>
								<ee:variables>
									<ee:set-variable variableName="payloadCancel"><![CDATA[%dw 2.0
output application/json
---
{
	Load:{
		"VMXId":payload
	}
}
]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
								<process-provision-cost-api:cancel-cost-provision-external doc:name="Cancel cost provision external" doc:id="7c0556e0-8e5b-4d61-b978-cdf0113c5d15" config-ref="Process_provision_cost_api_Config" operation-type="provisionCostCancel" src-system="#[vars.srcSystem]" client-id="#[p('client.process.provision.cost.https.client.id')]" client-secret="#[p('client.process.provision.cost.https.client.secret')]" >
									<process-provision-cost-api:cancel-cost-provision-external-request-data ><![CDATA[#[vars.payloadCancel]]]></process-provision-cost-api:cancel-cost-provision-external-request-data>
								</process-provision-cost-api:cancel-cost-provision-external>
							</foreach>
						</when>
						<otherwise >
							<process-provision-cost-api:cancel-cost-provision-external doc:name="Cancel cost provision external1" doc:id="945e35fd-59ce-4c70-a434-04dc87b3500f" config-ref="Process_provision_cost_api_Config" operation-type="provisionCostCancel" src-system="#[vars.srcSystem]" client-id="#[p('client.process.provision.cost.https.client.id')]" client-secret="#[p('client.process.provision.cost.https.client.secret')]">
			<process-provision-cost-api:cancel-cost-provision-external-request-data><![CDATA[#[vars.payloadCancel]]]></process-provision-cost-api:cancel-cost-provision-external-request-data>
		</process-provision-cost-api:cancel-cost-provision-external>
						</otherwise>
					</choice>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" doc:id="7436616d-249b-489b-a366-27c31616b401" message="#['\n'] ********** El valor de ExStatus es: #[payload.d.EX_RETURN.EX_STATUS] **********  #['\n']" />
			</otherwise>
		</choice>
		</async>
		<set-payload value="#[vars.RsBack]" doc:name="Set Payload" doc:id="461d2baa-861e-4c60-b599-e4aba178b54d" />
	</sub-flow>
</mule>
